$date
	Sun May 17 22:54:23 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module assim $end
$var wire 1 ! op $end
$var wire 32 " v1 [31:0] $end
$var wire 32 # v2 [31:0] $end
$var wire 32 $ res [31:0] $end
$var reg 1 % clk $end
$scope module fas $end
$var wire 1 % clk $end
$var wire 1 ! op $end
$var wire 32 & v1 [31:0] $end
$var wire 32 ' v2 [31:0] $end
$var wire 32 ( vres [31:0] $end
$var wire 24 ) lzres [23:0] $end
$var wire 8 * lznum [7:0] $end
$var reg 8 + dexp [7:0] $end
$var reg 24 , lzr [23:0] $end
$var reg 1 - op3 $end
$var reg 1 . op4 $end
$var reg 1 / op5 $end
$var reg 1 0 opb $end
$var reg 1 1 opb2 $end
$var reg 1 2 ops $end
$var reg 1 3 ops2 $end
$var reg 25 4 r [24:0] $end
$var reg 32 5 res [31:0] $end
$var reg 32 6 vb [31:0] $end
$var reg 23 7 vb2 [22:0] $end
$var reg 25 8 vb3 [24:0] $end
$var reg 8 9 vexp [7:0] $end
$var reg 8 : vexp2 [7:0] $end
$var reg 8 ; vexp3 [7:0] $end
$var reg 8 < vexp4 [7:0] $end
$var reg 8 = vexp5 [7:0] $end
$var reg 32 > vs [31:0] $end
$var reg 23 ? vs2 [22:0] $end
$var reg 25 @ vs3 [24:0] $end
$scope function vssf $end
$var reg 8 A num [7:0] $end
$var reg 24 B v [23:0] $end
$var reg 24 C vssf [23:0] $end
$upscope $end
$scope module lzm $end
$var wire 1 % clk $end
$var wire 25 D v [24:0] $end
$var wire 24 E res [23:0] $end
$var wire 8 F num [7:0] $end
$var reg 32 G cnum [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
x3
x2
x1
x0
x/
x.
x-
bx ,
bx +
bx *
bx )
bx (
b11000010111101101100110011001101 '
b11000000111010000000000000000000 &
0%
bx $
b11000010111101101100110011001101 #
b11000000111010000000000000000000 "
1!
$end
#1
b11000 *
b11000 F
b0 )
b0 E
b11000000000000000000000000000 G
b0 @
b1xxxxxxxxxxxxxxxxxxxxxxx 8
b11000000111010000000000000000000 >
b1000010111101101100110011001101 6
b0 C
b1xxxxxxxxxxxxxxxxxxxxxxx B
1%
#2
0%
#3
b0 ,
b11010000000000000000000 ?
b11101101100110011001101 7
b10000101 9
b100 +
12
00
1%
#4
0%
#5
bx00000000000000000000000 $
bx00000000000000000000000 (
bx00000000000000000000000 5
b11101000000000000000 @
b111101101100110011001101 8
b10000101 :
13
01
b11101000000000000000 C
b111010000000000000000000 B
b100 A
1%
#6
0%
#7
b111010000100110011001101 4
b111010000100110011001101 D
b10000101 ;
0-
1%
#8
0%
#9
b0 *
b0 F
b111010000100110011001101 )
b111010000100110011001101 E
b111010000100110011001101 G
b10000101 <
0.
1%
#10
0%
#11
b111010000100110011001101 ,
b10000101 =
0/
1%
#12
0%
#13
b1000010111010000100110011001101 $
b1000010111010000100110011001101 (
b1000010111010000100110011001101 5
1%
#14
0%
#15
1%
#16
0%
#17
1%
#18
0%
#19
1%
#20
0%
