$date
	Sat May 16 20:50:42 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module addsim $end
$var wire 32 ! v1 [31:0] $end
$var wire 32 " v2 [31:0] $end
$var wire 32 # res [31:0] $end
$var reg 1 $ clk $end
$scope module fa $end
$var wire 1 $ clk $end
$var wire 32 % v1 [31:0] $end
$var wire 32 & v2 [31:0] $end
$var wire 32 ' vres [31:0] $end
$var wire 24 ( lzres [23:0] $end
$var wire 8 ) lznum [7:0] $end
$var reg 8 * dexp [7:0] $end
$var reg 24 + lzr [23:0] $end
$var reg 25 , r [24:0] $end
$var reg 32 - res [31:0] $end
$var reg 32 . vb [31:0] $end
$var reg 23 / vb2 [22:0] $end
$var reg 25 0 vb3 [24:0] $end
$var reg 8 1 vexp [7:0] $end
$var reg 8 2 vexp2 [7:0] $end
$var reg 8 3 vexp3 [7:0] $end
$var reg 8 4 vexp4 [7:0] $end
$var reg 8 5 vexp5 [7:0] $end
$var reg 32 6 vs [31:0] $end
$var reg 23 7 vs2 [22:0] $end
$var reg 25 8 vs3 [24:0] $end
$scope function vssf $end
$var reg 8 9 num [7:0] $end
$var reg 24 : v [23:0] $end
$var reg 24 ; vssf [23:0] $end
$upscope $end
$scope module lzm $end
$var wire 1 $ clk $end
$var wire 25 < v [24:0] $end
$var wire 24 = res [23:0] $end
$var wire 8 > num [7:0] $end
$var reg 32 ? cnum [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
b1000000111010000000000000000000 &
b1000010111101101100110011001101 %
0$
bx #
b1000000111010000000000000000000 "
b1000010111101101100110011001101 !
$end
#1
b11000 )
b11000 >
b0 (
b0 =
b11000000000000000000000000000 ?
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx #
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx '
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -
b0 8
b1xxxxxxxxxxxxxxxxxxxxxxx 0
b1000000111010000000000000000000 6
b1000010111101101100110011001101 .
b0 ;
b1xxxxxxxxxxxxxxxxxxxxxxx :
1$
#2
0$
#3
b0 +
b11010000000000000000000 7
b11101101100110011001101 /
b10000101 1
b100 *
1$
#4
0$
#5
b0xxxxxxxx00000000000000000000000 #
b0xxxxxxxx00000000000000000000000 '
b0xxxxxxxx00000000000000000000000 -
b11101000000000000000 8
b111101101100110011001101 0
b10000101 2
b11101000000000000000 ;
b111010000000000000000000 :
b100 9
1$
#6
0$
#7
b111010000100110011001101 ,
b111010000100110011001101 <
b10000101 3
1$
#8
0$
#9
b0 )
b0 >
b111010000100110011001101 (
b111010000100110011001101 =
b111010000100110011001101 ?
b10000101 4
1$
#10
0$
#11
b111010000100110011001101 +
b10000101 5
1$
#12
0$
#13
b1000010111010000100110011001101 #
b1000010111010000100110011001101 '
b1000010111010000100110011001101 -
1$
#14
0$
#15
1$
#16
0$
#17
1$
#18
0$
#19
1$
#20
0$
